name: release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.17'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - run: make test
      - run: make build

images:
    runs-on: ubuntu-18.04
    needs: [build]
    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/download-artifact@v2.0.10
        with:
          name: centralcontext-api
          path: ./bin
      - run: chmod a+x ./bin/centralcontext-api
      - uses: actions/download-artifact@v2.0.10
        with:
          name: centralcontext-controlplane
          path: ./bin
      - run: chmod a+x ./bin/centralcontext-controlplane
      - uses: actions/download-artifact@v2.0.10
        with:
          name: centralcontext-clusterproxy
          path: ./bin
      - run: chmod a+x ./bin/centralcontext-clusterproxy
      - uses: actions/download-artifact@v2.0.10
        with:
          name: centralcontext-operator
          path: ./bin
      - run: chmod a+x ./bin/centralcontext-operator
      - uses: actions/download-artifact@v2.0.10
        with:
          name: kubectl-cctx
          path: ./bin
      - run: chmod a+x ./bin/kubectl-cctx

      - id: prep-api
        run: |
          DOCKER_IMAGE=ghcr.io/firstrunapp/firstrun/firstrun-api
          VERSION=${GITHUB_REF#refs/tags/}
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=tags::${TAGS}
      - id: prep-frontend
        run: |
          DOCKER_IMAGE=ghcr.io/firstrunapp/firstrun/firstrun-frontend
          VERSION=${GITHUB_REF#refs/tags/}
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1.10.0
        name: log in to docker registry
        with:
          registry: ghcr.io
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build api image
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          tags: ${{ steps.prep-api.outputs.tags }}
          file: ./deploy/Dockerfile.api
          push: true

      - name: Build frontend image
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          tags: ${{ steps.prep-frontend.outputs.tags }}
          file: ./deploy/Dockerfile.frontend
          push: true

